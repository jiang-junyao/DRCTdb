install.packages("tidyverse")
install.packages('Seurat')
library(Seurat)
install.packages("parallelly")
install.packages("Seurat")
library(Seurat)
install.packages("parallelly")
install.packages("parallelly")
library(Seurat)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Mfuzz")
library(Mfuzz)
remove.packages("SummarizedExperiment")
install.packages("C:/Users/armstrong/Desktop/SummarizedExperiment.zip", repos = NULL, type = "win.binary")
install.packages("rtracklayer")
BiocManager::install('rtracklayer')
library(rtracklayer)
rtracklayer::import(format = 'gtf')
?import
??import
'TNGGGTTGGCCTCAGAAAGGTGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTAATCGATCTCGTTTGGCGTGT' |> nchar()
'taatacgactcactatagggccttctcccggagtccta'
'taatacgactcactatagggccttctcccggagtccta' |> nchar()
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
df <- AvailableData()
library(SeuratData)
df <- AvailableData()
View(df)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
remove.packages("cli")
install.packages("cli")
devtools::install_github("bnprks/BPCells")
library(BPCells)
library(Seurat)
library(SeuratObject)
library(SeuratDisk)
library(Azimuth)
?save
?saveRDS
?saveRDS.Seurat
saveRDS.Seurat
saveRDS.Seurat()
SeuratObject::saveRDS()
SeuratObject::saveRDS
options(Seurat.object.assay.version = "v5")
remotes::install_github('satijalab/azimuth', ref = 'master')
BiocManager::install("batchelor")
BiocManager::install("batchelor",force = T)
BiocManager::install("batchelor",force = T)
.libPaths()
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
library(SeuratWrappers)
SeuratWrappers::RunFastMNN()
shiny::runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
library(Signac)
library(Seurat)
library(tidyverse)
library(Matrix)
library(glue)
source('preprocess_functions.R')
setwd("E:/Db/DRCTdb/2.Data preprocessing")
source('preprocess_functions.R')
sample10_ATAC <- readRDS('../../data/scATAC-seq/Sample10/sample10_peak_matrix.Rds')
sparse_mtx <- sample10_ATAC@assays@data$PeakMatrix
rownames(sparse_mtx) <- paste(as.data.frame(sample10_ATAC@rowRanges)[[1]],as.data.frame(sample10_ATAC@rowRanges)[[2]],as.data.frame(sample10_ATAC@rowRanges)[[3]],sep = '-')
sparse_mtx <- sparse_mtx[which(map_vec(rownames(sparse_mtx),subset_peaks)),]
pseudobulk <- generate_pseudobulk(sparse_mtx,group_by = sample10_ATAC$cell_type)
cell_gr <- tidyr::separate(as.data.frame(rownames(pseudobulk)),col = everything(),sep = '-',into = c('seqnames','start','end'))
cell_gr_list <- map(colnames(pseudobulk),get_cell_gr,seurat_Obj = sample10_ATAC)
View(cell_gr_list)
View(pseudobulk)
View(cell_gr_list)
colnames(pseudobulk)
length(which(sample10_ATAC$cell_type == 'AT1/AT2'))
vec <- pseudobulk[['AT1/AT2']]
vec
View(cell_gr)
min_cell <- ceiling(cell_num * 0.025)
cell_num = length(which(sample10_ATAC$cell_type == 'AT1/AT2'))
min_cell <- ceiling(cell_num * 0.025)
min_cell
cell_gr[which(as.vector(vec) >= min_cell),]
cell_gr[which(as.vector(vec) >= min_cell),] %>% GenomicRanges::makeGRangesFromDataFrame()
cell_gr_list
names(cell_gr_list) <- colnames(pseudobulk)
names(cell_gr_list)
sample10_ATAC <- readRDS('../../data/scATAC-seq/Sample10/sample10_peak_matrix.Rds')
sparse_mtx <- sample10_ATAC@assays@data$PeakMatrix
rownames(sparse_mtx) <- paste(as.data.frame(sample10_ATAC@rowRanges)[[1]],as.data.frame(sample10_ATAC@rowRanges)[[2]],as.data.frame(sample10_ATAC@rowRanges)[[3]],sep = '-')
sparse_mtx <- sparse_mtx[which(map_vec(rownames(sparse_mtx),subset_peaks)),]
sample10_ATAC$cell_type <- str_replace(sample10_ATAC$cell_type,'+','_')
str_replace('CD5+ mature B','+','_')
str_replace('CD5+ mature B','\\+','_')
str_replace('CD5+ mature B','\\+','high')
str_replace('CD5+ mature B','\\+','_high')
sample10_ATAC$cell_type <- str_replace(sample10_ATAC$cell_type,'\\+','_high')
str_replace('AT1/AT2','/','_')
sample10_ATAC$cell_type <- str_replace(sample10_ATAC$cell_type,'/','_')
sample10_ATAC$cell_type |> unique()
str_replace('Early tip_stalk/airway progenitor','/','_')
sample10_ATAC <- readRDS('../../data/scATAC-seq/Sample10/sample10_peak_matrix.Rds')
sample10_ATAC$cell_type |> unique()
str_replace_all('Early tip/stalk/airway progenitor','/','_')
sample10_ATAC$cell_type <- str_replace(sample10_ATAC$cell_type,'\\+','_high')
sample10_ATAC$cell_type <- str_replace_all(sample10_ATAC$cell_type,'/','_')
sparse_mtx <- sample10_ATAC@assays@data$PeakMatrix
rownames(sparse_mtx) <- paste(as.data.frame(sample10_ATAC@rowRanges)[[1]],as.data.frame(sample10_ATAC@rowRanges)[[2]],as.data.frame(sample10_ATAC@rowRanges)[[3]],sep = '-')
sparse_mtx <- sparse_mtx[which(map_vec(rownames(sparse_mtx),subset_peaks)),]
pseudobulk <- generate_pseudobulk(sparse_mtx,group_by = sample10_ATAC$cell_type)
cell_gr <- tidyr::separate(as.data.frame(rownames(pseudobulk)),col = everything(),sep = '-',into = c('seqnames','start','end'))
cell_gr_list <- map(colnames(pseudobulk),get_cell_gr,seurat_Obj = sample10_ATAC)
names(cell_gr_list) <- colnames(pseudobulk)
sample <- 'sample10'
cell_gr_list
for (i in 1:length(cell_gr_list)) {
if (!dir.exists(glue('../../data/bed/{sample}'))) {
dir.create(glue('../../data/bed/{sample}'))
}
filenames <- paste0(glue('../../data/bed/{sample}/'),names(cell_gr_list)[i],'.bed.gz')
rtracklayer::export.bed(object = cell_gr_list[[i]],con = filenames)
cat(names(cell_gr_list)[i],'\n')
}
