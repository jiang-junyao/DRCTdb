install.packages("tidyverse")
install.packages('Seurat')
library(Seurat)
install.packages("parallelly")
install.packages("Seurat")
library(Seurat)
install.packages("parallelly")
install.packages("parallelly")
library(Seurat)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Mfuzz")
library(Mfuzz)
remove.packages("SummarizedExperiment")
install.packages("C:/Users/armstrong/Desktop/SummarizedExperiment.zip", repos = NULL, type = "win.binary")
install.packages("rtracklayer")
BiocManager::install('rtracklayer')
library(rtracklayer)
rtracklayer::import(format = 'gtf')
?import
??import
'TNGGGTTGGCCTCAGAAAGGTGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTAATCGATCTCGTTTGGCGTGT' |> nchar()
'taatacgactcactatagggccttctcccggagtccta'
'taatacgactcactatagggccttctcccggagtccta' |> nchar()
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
df <- AvailableData()
library(SeuratData)
df <- AvailableData()
View(df)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
remove.packages("cli")
install.packages("cli")
devtools::install_github("bnprks/BPCells")
library(BPCells)
library(Seurat)
library(SeuratObject)
library(SeuratDisk)
library(Azimuth)
?save
?saveRDS
?saveRDS.Seurat
saveRDS.Seurat
saveRDS.Seurat()
SeuratObject::saveRDS()
SeuratObject::saveRDS
options(Seurat.object.assay.version = "v5")
remotes::install_github('satijalab/azimuth', ref = 'master')
BiocManager::install("batchelor")
BiocManager::install("batchelor",force = T)
BiocManager::install("batchelor",force = T)
.libPaths()
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
library(SeuratWrappers)
SeuratWrappers::RunFastMNN()
shiny::runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
remotes::install_github("PMBio/MuDataSeurat")
knitr::opts_chunk$set(echo = F,dev="CairoPNG", out.width = "100%")
rbbt::bbt_write_bib("references.bib",
rbbt::bbt_detect_citations(list.files(pattern = 'Rmd')),
overwrite = TRUE)
library(knitr)
library(Seurat)
library(tidyverse)
library(glue)
source('function.R')
sample <- 'sample1'
knitr::include_graphics(glue("./{sample}/Fig/PNG/{sample}_feature_plot.png"))
knitr::include_graphics(glue("./{sample}Fig/PNG/{sample}_feature_plot_othermaker.png"))
library(chromVAR)
library(motifmatchr)
library(Matrix)
library(SummarizedExperiment)
library(BiocParallel)
set.seed(2017)
options(timeout = max(1000, getOption("timeout")))
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
data(example_counts, package = "chromVAR")
library(BSgenome.Hsapiens.UCSC.hg19)
example_counts <- addGCBias(example_counts, genome = BSgenome.Hsapiens.UCSC.hg19)
View(example_counts)
example_counts$depth
example_counts$Cell_Type
counts_filtered <- filterSamples(example_counts, min_depth = 1500,
min_in_peaks = 0.15)
counts_filtered <- filterPeaks(counts_filtered)
motifs <- getJasparMotifs()
BiocManager::install('JASPAR2016')
motifs <- getJasparMotifs()
View(motifs)
dev <- computeDeviations(object = counts_filtered,
annotations = motif_ix)
motif_ix <- matchMotifs(motifs, counts_filtered,
genome = BSgenome.Hsapiens.UCSC.hg19)
dev <- computeDeviations(object = counts_filtered, annotations = motif_ix)
View(dev)
dev@colData
dev@assays
dev@elementMetadata
variability <- computeVariability(dev)
View(variability)
remotes::install_github("stuart-lab/signac", "seurat5")
remotes::install_github("stuart-lab/signac", "seurat5")
remotes::install_github("stuart-lab/signac", "seurat5")
setwd("E:/Db/DRCTdb/1.Data_format_normalization")
##
library(Signac)
library(Seurat)
library(tidyverse)
source('../2.Data preprocessing/preprocess_functions.R')
sample24_ATAC <- readRDS('../../data/scATAC-seq/Sample24/Sample24_peak_matrix.Rds')
coldata <- as.data.frame(sample24_ATAC@colData)
coldata$raw_barcode <- rownames(coldata)
sparse_mtx <- sample24_ATAC@assays@data$PeakMatrix
rownames(sparse_mtx) <- paste(as.data.frame(sample24_ATAC@rowRanges)[[1]],as.data.frame(sample24_ATAC@rowRanges)[[2]],as.data.frame(sample24_ATAC@rowRanges)[[3]],sep = '-')
sparse_mtx <- sparse_mtx[which(map_vec(rownames(sparse_mtx),subset_peaks)),]
chrom_assay <- CreateChromatinAssay(
counts = sparse_mtx,
sep = c("-", "-"),
genome = 'hg38',
min.cells = 10,
min.features = 200
)
sample24 <- CreateSeuratObject(
counts = chrom_assay,
assay = "peaks"
)
all(colnames(sample24) %in% colnames(sample24_ATAC))
identical(colnames(sample24),colnames(sample24_ATAC))
metadata <- sample24_ATAC@colData |> as.data.frame()
identical(colnames(sample24),rownames(metadata))
sample24 <- AddMetaData(sample24,metadata = metadata)
saveRDS(sample24,file = '../../data/scATAC-seq/Sample24/sample24_scATAC-seq_100k_all_processed.Rds')
sample24_healthy <- subset(x = sample24,Diagnosis=='Unaffected')
saveRDS(sample24_healthy,file = '../../data/scATAC-seq/Sample24/sample24_scATAC-seq_100k_healthy_processed.Rds')
gsub(pattern = " ", replacement = "_", x = groups)
GetGroups <- function(
object,
group.by,
idents
) {
if (is.null(x = group.by)) {
obj.groups <- Idents(object = object)
} else {
obj.md <- object[[group.by]]
obj.groups <- obj.md[, 1]
names(obj.groups) <- rownames(x = obj.md)
}
if (!is.null(idents)) {
obj.groups <- obj.groups[obj.groups %in% idents]
}
return(obj.groups)
}
sample24_ATAC
groups <- GetGroups(
object = sample24_ATAC,
group.by = 'cell_type'
)
groups <- GetGroups(
object = sample24_ATAC,
group.by = 'cell_type',
idents = NULL
)
groups <- GetGroups(
object = sample24_ATAC,
group.by = 'cell_type',
idents = Idents(sample24_ATAC)
)
###
sample24_ATAC <- readRDS('../../data/scATAC-seq/Sample24/sample24_scATAC-seq_100k_healthy_processed.Rds')
sparse_mtx <- sample24_ATAC@assays$peaks@counts
sparse_mtx <- sparse_mtx[str_starts(rownames(sparse_mtx),'chr'),]
pseudobulk <- generate_pseudobulk(sparse_mtx,group_by = sample24_ATAC$cell_type)
cell_gr <- separate(as.data.frame(rownames(pseudobulk)),col = everything(),sep = '-',into = c('seqnames','start','end'))
cell_gr_list <- map(colnames(pseudobulk),get_cell_gr,seurat_Obj = sample24_ATAC)
names(cell_gr_list) <- colnames(pseudobulk)
sample <- 'sample24'
for (i in 1:length(cell_gr_list)) {
if (!dir.exists(glue('../../data/bed/{sample}'))) {
dir.create(glue('../../data/bed/{sample}'))
}
filenames <- paste0(glue('../../data/bed/{sample}/'),names(cell_gr_list)[i],'.bed.gz')
rtracklayer::export.bed(object = cell_gr_list[[i]],con = filenames)
cat(names(cell_gr_list)[i],'\n')
}
library(glue)
for (i in 1:length(cell_gr_list)) {
if (!dir.exists(glue('../../data/bed/{sample}'))) {
dir.create(glue('../../data/bed/{sample}'))
}
filenames <- paste0(glue('../../data/bed/{sample}/'),names(cell_gr_list)[i],'.bed.gz')
rtracklayer::export.bed(object = cell_gr_list[[i]],con = filenames)
cat(names(cell_gr_list)[i],'\n')
}
