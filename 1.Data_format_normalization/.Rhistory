install.packages("tidyverse")
install.packages('Seurat')
library(Seurat)
install.packages("parallelly")
install.packages("Seurat")
library(Seurat)
install.packages("parallelly")
install.packages("parallelly")
library(Seurat)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Mfuzz")
library(Mfuzz)
remove.packages("SummarizedExperiment")
install.packages("C:/Users/armstrong/Desktop/SummarizedExperiment.zip", repos = NULL, type = "win.binary")
install.packages("rtracklayer")
BiocManager::install('rtracklayer')
library(rtracklayer)
rtracklayer::import(format = 'gtf')
?import
??import
'TNGGGTTGGCCTCAGAAAGGTGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTAATCGATCTCGTTTGGCGTGT' |> nchar()
'taatacgactcactatagggccttctcccggagtccta'
'taatacgactcactatagggccttctcccggagtccta' |> nchar()
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
df <- AvailableData()
library(SeuratData)
df <- AvailableData()
View(df)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
remove.packages("cli")
install.packages("cli")
devtools::install_github("bnprks/BPCells")
library(BPCells)
library(Seurat)
library(SeuratObject)
library(SeuratDisk)
library(Azimuth)
?save
?saveRDS
?saveRDS.Seurat
saveRDS.Seurat
saveRDS.Seurat()
SeuratObject::saveRDS()
SeuratObject::saveRDS
options(Seurat.object.assay.version = "v5")
remotes::install_github('satijalab/azimuth', ref = 'master')
BiocManager::install("batchelor")
BiocManager::install("batchelor",force = T)
BiocManager::install("batchelor",force = T)
.libPaths()
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
library(SeuratWrappers)
SeuratWrappers::RunFastMNN()
shiny::runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
### Transfer data to seurat object
library(Seurat)
library(GenomicRanges)
library(tidyverse)
merged_matrix <- ReadMtx(features = '../../data/bed/sample3/rawdata/cCREs.bed.gz',
cells = '../../data/bed/sample3/rawdata/celltypes.txt.gz',
mtx = '../../data/bed/sample3/rawdata/matrix.tsv.gz',
feature.column = 1)
setwd("E:/Db/DRCTdb/1.Data_format_normalization")
merged_matrix <- ReadMtx(features = '../../data/bed/sample3/rawdata/cCREs.bed.gz',
cells = '../../data/bed/sample3/rawdata/celltypes.txt.gz',
mtx = '../../data/bed/sample3/rawdata/matrix.tsv.gz',
feature.column = 1)
cres <- data.table::fread('../../data/bed/sample3/rawdata/cCREs.bed.gz')
merged_matrix_df <- as.data.frame(merged_matrix)
cell_gr_list <- purrr::map(merged_matrix_df,function(x){
gr <- cres[which(x == 1)] %>% makeGRangesFromDataFrame()
return(gr)
})
colnames(cres) <- c('seqnames','start','end')
cell_gr_list <- purrr::map(merged_matrix_df,function(x){
gr <- cres[which(x == 1)] %>% makeGRangesFromDataFrame()
return(gr)
})
View(merged_matrix_df)
View(cres)
cres[which(x == 1)]
cell_gr_list <- purrr::map(merged_matrix_df,function(x){
gr <- cres[which(x == 1)] %>% makeGRangesFromDataFrame()
return(gr)
})
View(cell_gr_list)
names(cell_gr_list)
str_extract(names(cell_gr_list),'.*(?<!\\s\\d)')
merged_cell_type <- unique(str_extract(names(cell_gr_list),'.*(?<!\\s\\d)'))
merged_cell_type
View(merged_matrix_df)
View(cell_gr_list)
str_which(names(cell_gr_list),merged_cell_type[1])
str_which(names(cell_gr_list),merged_cell_type[9])
cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[9])]
cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[9])] %>% reduce()
GenomicRanges::reduce(cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[9])])
?reduce
GenomicRanges::reduce(unlist(cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[9])]))
unlist(cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[9])])
reduce(cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[9])],GenomicRanges::reduce)
reduce(cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[9])],c)
GenomicRanges::reduce(reduce(cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[9])],c))
merged_cell_type[i])
map(seq_along(merged_cell_type),function(i){
concensus_gr <- GenomicRanges::reduce(reduce(cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[i])],c))
return(concensus_gr)
})
seq_along(merged_cell_type)
cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[4])]
cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[i])]
cell_gr_list[str_which(names(cell_gr_list),merged_cell_type[4])]
merged_cell_type[4]
str_which(names(cell_gr_list),merged_cell_type[4])
str_which(names(cell_gr_list),fixed(merged_cell_type[4]))
map(seq_along(merged_cell_type),function(i){
concensus_gr <- GenomicRanges::reduce(reduce(cell_gr_list[str_which(names(cell_gr_list),fixed(merged_cell_type[i]))],c))
return(concensus_gr)
})
reduced_cell_type <- map(seq_along(merged_cell_type),function(i){
concensus_gr <- GenomicRanges::reduce(reduce(cell_gr_list[str_which(names(cell_gr_list),fixed(merged_cell_type[i]))],c))
return(concensus_gr)
})
View(reduced_cell_type)
reduced_cell_type <- map(seq_along(merged_cell_type),function(i){
concensus_gr <- GenomicRanges::reduce(reduce(cell_gr_list[str_which(names(cell_gr_list),fixed(merged_cell_type[i]))],c))
return(concensus_gr)
}) %>% setNames(merged_cell_type)
View(reduced_cell_type)
for (i in 1:length(cell_gr_list)) {
filenames <- paste0('../../data/bed/sample3/',names(cell_gr_list)[i],'.bed.gz')
rtracklayer::export.bed(object = cell_gr_list[[i]],con = filenames)
cat(names(cell_gr_list)[i],'\n')
}
for (i in 1:length(cell_gr_list)) {
filenames <- paste0('../../data/bed/sample3/',names(reduced_cell_type)[i],'.bed.gz')
rtracklayer::export.bed(object = reduced_cell_type[[i]],con = filenames)
cat(names(reduced_cell_type)[i],'\n')
}
for (i in 1:length(cell_gr_list)) {
filenames <- paste0('../../data/bed/sample3/',names(reduced_cell_type)[i],'.bed.gz')
rtracklayer::export.bed(object = reduced_cell_type[[i]],con = filenames)
cat(names(reduced_cell_type)[i],'\n')
}
for (i in 1:length(reduced_cell_type)) {
filenames <- paste0('../../data/bed/sample3/',names(reduced_cell_type)[i],'.bed.gz')
rtracklayer::export.bed(object = reduced_cell_type[[i]],con = filenames)
cat(names(reduced_cell_type)[i],'\n')
}
for (i in 1:length(reduced_cell_type)) {
filenames <- paste0('../../data/bed/sample3/',names(reduced_cell_type)[i],'.bed.gz')
rtracklayer::export.bed(object = reduced_cell_type[[i]],con = filenames)
cat(names(reduced_cell_type)[i],'\n')
}
