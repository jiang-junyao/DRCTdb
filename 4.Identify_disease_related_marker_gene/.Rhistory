install.packages("tidyverse")
install.packages('Seurat')
library(Seurat)
install.packages("parallelly")
install.packages("Seurat")
library(Seurat)
install.packages("parallelly")
install.packages("parallelly")
library(Seurat)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Mfuzz")
library(Mfuzz)
remove.packages("SummarizedExperiment")
install.packages("C:/Users/armstrong/Desktop/SummarizedExperiment.zip", repos = NULL, type = "win.binary")
install.packages("rtracklayer")
BiocManager::install('rtracklayer')
library(rtracklayer)
rtracklayer::import(format = 'gtf')
?import
??import
'TNGGGTTGGCCTCAGAAAGGTGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTAATCGATCTCGTTTGGCGTGT' |> nchar()
'taatacgactcactatagggccttctcccggagtccta'
'taatacgactcactatagggccttctcccggagtccta' |> nchar()
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
df <- AvailableData()
library(SeuratData)
df <- AvailableData()
View(df)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
remove.packages("cli")
install.packages("cli")
devtools::install_github("bnprks/BPCells")
library(BPCells)
library(Seurat)
library(SeuratObject)
library(SeuratDisk)
library(Azimuth)
?save
?saveRDS
?saveRDS.Seurat
saveRDS.Seurat
saveRDS.Seurat()
SeuratObject::saveRDS()
SeuratObject::saveRDS
options(Seurat.object.assay.version = "v5")
remotes::install_github('satijalab/azimuth', ref = 'master')
BiocManager::install("batchelor")
BiocManager::install("batchelor",force = T)
BiocManager::install("batchelor",force = T)
.libPaths()
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
library(SeuratWrappers)
SeuratWrappers::RunFastMNN()
shiny::runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
remotes::install_github("PMBio/MuDataSeurat")
knitr::opts_chunk$set(echo = F,dev="CairoPNG", out.width = "100%")
rbbt::bbt_write_bib("references.bib",
rbbt::bbt_detect_citations(list.files(pattern = 'Rmd')),
overwrite = TRUE)
library(knitr)
library(Seurat)
library(tidyverse)
library(glue)
source('function.R')
sample <- 'sample1'
knitr::include_graphics(glue("./{sample}/Fig/PNG/{sample}_feature_plot.png"))
knitr::include_graphics(glue("./{sample}Fig/PNG/{sample}_feature_plot_othermaker.png"))
library(chromVAR)
library(motifmatchr)
library(Matrix)
library(SummarizedExperiment)
library(BiocParallel)
set.seed(2017)
options(timeout = max(1000, getOption("timeout")))
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
data(example_counts, package = "chromVAR")
library(BSgenome.Hsapiens.UCSC.hg19)
example_counts <- addGCBias(example_counts, genome = BSgenome.Hsapiens.UCSC.hg19)
View(example_counts)
example_counts$depth
example_counts$Cell_Type
counts_filtered <- filterSamples(example_counts, min_depth = 1500,
min_in_peaks = 0.15)
counts_filtered <- filterPeaks(counts_filtered)
motifs <- getJasparMotifs()
BiocManager::install('JASPAR2016')
motifs <- getJasparMotifs()
View(motifs)
dev <- computeDeviations(object = counts_filtered,
annotations = motif_ix)
motif_ix <- matchMotifs(motifs, counts_filtered,
genome = BSgenome.Hsapiens.UCSC.hg19)
dev <- computeDeviations(object = counts_filtered, annotations = motif_ix)
View(dev)
dev@colData
dev@assays
dev@elementMetadata
variability <- computeVariability(dev)
View(variability)
setwd("E:/Db/DRCTdb/4.Identify_disease_related_marker_gene")
library(Signac)
library(Seurat)
library(tidyverse)
library(TFBSTools)
library(JASPAR2020)
library(BSgenome.Hsapiens.UCSC.hg38)
library(Matrix)
library(glue)
source('preprocess_functions.R')
setwd("E:/Db/DRCTdb/4.Identify_disease_related_marker_gene")
source('../1.Data_format_normalization/preprocess_functions.R')
source('../2.Data preprocessing/preprocess_functions.R')
sample1_ATAC <- readRDS('../../data/scATAC-seq/sample1/Rds/sample1_scATAC-seq_80k_processed.Rds')
pfm <- getMatrixSet(
x = JASPAR2020,
opts = list(collection = "CORE", tax_group = 'vertebrates', all_versions = FALSE)
)
map(1:length(pfm),function(x){
pfm@listData[[1]]@tags$symbol
})
map(1:length(pfm),function(x){
pfm@listData[[i]]@tags$symbol
})
map(1:length(pfm),function(i){
pfm@listData[[i]]@tags$symbol
})
pfm@listData
pfm@listData[1]
pfm@listData[[1]]
pfm@listData[[2]]
1:length(pfm)
map(1:length(pfm),function(i){
pfm@listData[[i]]@tags$symbol
})
pfm@listData[[1]]@tags$symbol
pfm@listData[[2]]@tags$symbol
pfm@listData[[213]]@tags$symbol
pfm@listData[[2]]
map(1:length(pfm),function(i){
pfm@listData[[i]]@tags$remap_tf_name
})
map_chr(1:length(pfm),function(i){
pfm@listData[[i]]@tags$remap_tf_name
})
map(1:length(pfm),function(i){
pfm@listData[[i]]@tags$remap_tf_name
})
map(1:length(pfm),function(i){
pfm@listData[[i]]@tags$remap_tf_name
}) |> unlink()
map(1:length(pfm),function(i){
pfm@listData[[i]]@tags$remap_tf_name
}) |> unlist()
pfm@listData[[471]]
pfm@listData[[471]]@name
pfm@listData[[1]]@name
map(1:length(pfm),function(i){
if (is.null(pfm@listData[[i]]@tags$remap_tf_name)) {
return(pfm@listData[[i]]@name)
}else{
return(pfm@listData[[i]]@tags$remap_tf_name)
}
})
map_chr(1:length(pfm),function(i){
if (is.null(pfm@listData[[i]]@tags$remap_tf_name)) {
return(pfm@listData[[i]]@name)
}else{
return(pfm@listData[[i]]@tags$remap_tf_name)
}
})
length(pfm)
motif_symbol <- map_chr(1:length(pfm),function(i){
if (is.null(pfm@listData[[i]]@tags$remap_tf_name)) {
return(pfm@listData[[i]]@name)
}else{
return(pfm@listData[[i]]@tags$remap_tf_name)
}
})
# add motif information
sample1_ATAC <- AddMotifs(
object = sample1_ATAC,
genome = BSgenome.Hsapiens.UCSC.hg38,
pfm = pfm
)
sample1_ATAC <- RunChromVAR(
object = sample1_ATAC,
genome = BSgenome.Hsapiens.UCSC.hg38
)
DefaultAssay(sample1_ATAC) <- 'chromvar'
test <- sample1_ATAC@assays$chromvar$data
View(test)
pseudobulk <- generate_pseudobulk(as.sparse(test),group_by = sample1_ATAC$cell_type)
View(test)
View(test)
pfm
names(pfm)
names(pfm) %>% identical(rownames(test))
motif_activate_matrix <- sample1_ATAC@assays$chromvar$data
rownames(motif_activate_matrix) <- motif_symbol
pseudobulk <- generate_pseudobulk(as.sparse(test),group_by = sample1_ATAC$cell_type)
map(pseudobulk,function(x){rownames(pseudobulk)[order(x,decreasing = T)][1:10]})
pseudobulk <- generate_pseudobulk(as.sparse(motif_activate_matrix),group_by = sample1_ATAC$cell_type)
map(pseudobulk,function(x){rownames(pseudobulk)[order(x,decreasing = T)][1:10]})
motif_activate_matrix <- sample1_ATAC@assays$chromvar$data
motif_activate_matrix <- as.sparse(motif_activate_matrix)
View(motif_activate_matrix)
motif_activate_matrix
dims(motif_activate_matrix)
dim(motif_activate_matrix)
rownames(motif_activate_matrix) <- motif_symbol
pseudobulk <- generate_pseudobulk(motif_activate_matrix,group_by = sample1_ATAC$cell_type)
map(pseudobulk,function(x){rownames(pseudobulk)[order(x,decreasing = T)][1:10]})
View(pseudobulk)
rownames(motif_activate_matrix) <- motif_symbol
map(pseudobulk,function(x){rownames(pseudobulk)[order(x,decreasing = T)][1:10]})
rownames(pseudobulk) <- motif_symbol
map(pseudobulk,function(x){rownames(pseudobulk)[order(x,decreasing = T)][1:10]})
rownames(pseudobulk) <- motif_symbol
unique(motif_symbol)
motif_activate_matrix <- sample1_ATAC@assays$chromvar$data
motif_activate_matrix <- as.sparse(motif_activate_matrix)
pseudobulk <- generate_pseudobulk(motif_activate_matrix,group_by = sample1_ATAC$cell_type)
map(pseudobulk,function(x){rownames(pseudobulk)[order(x,decreasing = T)][1:10]})
names(motif_symbol) <- names(pfm)
motif_symbol
map(pseudobulk,function(x){rownames(pseudobulk)[order(x,decreasing = T)][1:10]})
map(pseudobulk,function(x){rownames(pseudobulk)[order(x,decreasing = T)][1:10]})
motif_symbol
mat2name <- function(x){
return(motif_symbol[str_which(names(motif_symbol),x)])
}
mat2name('MA0598.3')
map(pseudobulk,function(x){map_chr(rownames(pseudobulk)[order(x,decreasing = T)],mat2name)[1:10]})
cell_top10_TF_list <- map(pseudobulk, function(x) {
map_chr(rownames(pseudobulk)[order(x, decreasing = T)], mat2name)[1:10]
})
nrow(sample1_ATAC)
nrow(sample1_ATAC@assays$peaks)
data(example_motifs, package = "motifmatchr")
View(example_motifs)
aCM_gr <- rtracklayer::import.bed('../../data/bed/sample1/aCM.bed.gz')
motif_ix <- matchMotifs(example_motifs, aCM_gr, genome = "hg38")
##match motif
library(motifmatchr)
motif_ix <- matchMotifs(example_motifs, aCM_gr, genome = "hg38")
motif_ix
View(motif_ix)
motif_ix@rowRanges
motifMatches(motif_ix)
motif_ix <- matchMotifs(example_motifs, aCM_gr, genome = "hg38",out = "positions")
motif_ix
cell_top10_TF_list <- map(pseudobulk, function(x) {
rownames(pseudobulk)[order(x, decreasing = T)][1:10]
})
cell_top10_TF_list
cell_top10_TF_list$aCM
aCM_motif <- pfm[cell_top10_TF_list$aCM]
View(aCM_motif)
motif_ix <- matchMotifs(aCM_motif, aCM_gr, genome = "hg38",out = "positions")
motif_ix
name(motif_ix)
names(motif_ix)
map_chr(names(motif_ix),mat2name)
names(motif_ix) <- map_chr(names(motif_ix),mat2name)
View(motif_ix)
names(motif_ix)[i]
names(motif_ix)
for (i in 1:length(motif_ix)) {
if (!dir.exists(glue('../../data/bed/{sample}'))) {
dir.create(glue('../../data/bed/{sample}'))
}
cell_type <- 'aCM'
if (!dir.exists(glue('../../data/bed/{sample}/{cell_type}/'))) {
dir.create(glue('../../data/bed/{sample}/{cell_type}/'))
}
filenames <- paste0(glue('../../data/bed/{sample}/{cell_type}/'),names(motif_ix)[i],'.bed.gz')
rtracklayer::export.bed(object = motif_ix[[i]],con = filenames)
cat(names(cell_gr_list)[i],'\n')
}
sample <- 'sample1'
for (i in 1:length(motif_ix)) {
if (!dir.exists(glue('../../data/bed/{sample}'))) {
dir.create(glue('../../data/bed/{sample}'))
}
cell_type <- 'aCM'
if (!dir.exists(glue('../../data/bed/{sample}/{cell_type}/'))) {
dir.create(glue('../../data/bed/{sample}/{cell_type}/'))
}
filenames <- paste0(glue('../../data/bed/{sample}/{cell_type}/'),names(motif_ix)[i],'.bed.gz')
rtracklayer::export.bed(object = motif_ix[[i]],con = filenames)
cat(names(cell_gr_list)[i],'\n')
}
for (i in 1:length(motif_ix)) {
if (!dir.exists(glue('../../data/bed/{sample}'))) {
dir.create(glue('../../data/bed/{sample}'))
}
cell_type <- 'aCM'
if (!dir.exists(glue('../../data/bed/{sample}/{cell_type}/'))) {
dir.create(glue('../../data/bed/{sample}/{cell_type}/'))
}
filenames <- paste0(glue('../../data/bed/{sample}/{cell_type}/'),names(motif_ix)[i],'.bed.gz')
rtracklayer::export.bed(object = motif_ix[[i]],con = filenames)
cat(names(motif_ix)[i],'\n')
}
