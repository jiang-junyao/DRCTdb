write.table(sig_ct_df,paste0(output_path,'disease_related_celltypes.txt'),
quote = F,sep = '\t',row.names = F)
### disease related ccc
ccc_plot_list = list()
ccc_list = list()
source('F:\\general_code\\run_cellchat.R')
for (i in 1:length(sig_ct_list)) {
disease_name_use = names(sig_ct_list)[i]
related_ct = sig_ct_list[[i]]
if (length(related_ct)>1) {
rna_use = subset(rna2,ct %in% related_ct)
ccc = run_cellchat(rna_use,rna_use@meta.data,group = 'ct',species = 'hs')
groupSize <- as.numeric(table(ccc@idents))
par(mfrow=c(1,1))
p1 = netVisual_circle(ccc@net$weight, vertex.weight = groupSize,
weight.scale = T, label.edge= F,
title.name = "",vertex.label.cex = 1)
print(disease_name_use)
### disease related ccc
ccc_plot_list[[i]] = p1
ccc_list[[i]] = ccc
}
}
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
filenames2 = paste0(output_path,'ccc/',name_use,'.svg')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
library(Seurat)
library(igraph)
library(GenomicRanges)
setwd('E:\\DRCTdb\\5.Downstream_analysis')
source('identify_region_motif.R')
source('overlap_gwas.R')
source('plot.R')
### path need to define
output_path = 'E:\\DRCTdb\\ignore\\downstream_result\\sample7\\'
dir.create(output_path)
rna_path = 'E:\\DRCTdb\\ignore\\scRNA-seq\\sample7\\Processed_scRNA-seq.rds'
atac_path = 'E:\\DRCTdb\\ignore\\bed\\sample7/'
ldsc_path = "E:/DRCTdb/ignore/LDSC_results/sample7/pvalues.tsv"
snp_path = 'E:\\public\\all_snp_info_gr.Rds'
disease_path = 'E:\\DRCTdb\\ignore\\LDSC_hg38\\summary_statistics\\Josh'
### create output folder
dir.create(paste0(output_path,'ccc'))
dir.create(paste0(output_path,'grn_cor04'))
dir.create(paste0(output_path,'grn_cor02'))
dir.create(paste0(output_path,'rna_snp'))
dir.create(paste0(output_path,'atac_snp'))
###loact_m = gsub('strocyte','Astrocyte',ct_m)d data & define cell type use
rna = readRDS(rna_path)
### modify cell type in rna seurat
ct_m = rna$cell_type__custom
ct_m = gsub('AII-amacrine','AIIamacrine',ct_m)
ct_m = gsub('GABA-amacrine','GABAamacrine',ct_m)
ct_m = gsub('Gly-amacrine','Glyamacrine',ct_m)
ct_m = gsub('Muller glia ','Mullerglia',ct_m)
ct_m = gsub('ON-cone bipolar','ONconebipolar',ct_m)
ct_m = gsub('OFF-cone bipolar','OFFconebipolar',ct_m)
ct_m = gsub('Retinal ganglion cell','Retinalganglioncell',ct_m)
ct_m = gsub('Rod bipolar','Rodbipolar',ct_m)
rna@active.ident=as.factor(ct_m)
atac = dir(atac_path)
atac_ct = unlist(strsplit(atac,'.bed.gz'))
ct_use = intersect(rna@active.ident,atac_ct)
rna[['ct']] = as.character(rna@active.ident)
names(atac) = atac_ct
atac = atac[names(atac) %in% ct_use]
atac_list = list()
for (i in 1:length(atac)) {
bed=read.delim(paste0(atac_path,atac[i]),header = F)
peak = paste0(bed[,1],':',bed[,2],'-',bed[,3])
atac_list[[names(atac)[i]]] = peak
}
ldsc_result <- read.delim(ldsc_path)
ct_use = intersect(colnames(ldsc_result),ct_use)
snp_all = readRDS(snp_path)
ldsc_result$X = gsub(' ','_',ldsc_result$X)
###get all disease
disease_all = dir(disease_path)
disease_all_name = as.data.frame(t(as.data.frame(strsplit(disease_all,'\\.'))))
names(disease_all) = disease_all_name[,4]
### ldsc summary
ldsc_result = ldsc_result[!duplicated(ldsc_result[,1]),]
rownames(ldsc_result) = ldsc_result[,1]
ldsc_result = ldsc_result[,ct_use]
sig_ct_list = list()
sig_ct_vector = c()
for (i in 1:nrow(ldsc_result)) {
sig_ct = colnames(ldsc_result)[ldsc_result[i,]<0.05]
if (length(sig_ct)>0) {
sig_ct_list[[rownames(ldsc_result)[i]]] = sig_ct
sig_ct_merge = paste0(sig_ct,collapse = ';')
sig_ct_vector = c(sig_ct_vector,sig_ct_merge)
}
}
sig_ct_df = data.frame(names(sig_ct_list),sig_ct_vector)
colnames(sig_ct_df) = c('disease','related_cell_type')
write.table(sig_ct_df,paste0(output_path,'disease_related_celltypes.txt'),
quote = F,sep = '\t',row.names = F)
### disease related ccc
ccc_plot_list = list()
ccc_list = list()
rna2[['ct']] = rna$ct
for (i in 1:length(sig_ct_list)) {
disease_name_use = names(sig_ct_list)[i]
related_ct = sig_ct_list[[i]]
if (length(related_ct)>1) {
rna_use = subset(rna2,ct %in% related_ct)
ccc = run_cellchat(rna_use,rna_use@meta.data,group = 'ct',species = 'hs')
groupSize <- as.numeric(table(ccc@idents))
par(mfrow=c(1,1))
p1 = netVisual_circle(ccc@net$weight, vertex.weight = groupSize,
weight.scale = T, label.edge= F,
title.name = "",vertex.label.cex = 2)
print(disease_name_use)
### disease related ccc
ccc_plot_list[[i]] = p1
ccc_list[[i]] = ccc
}
}
###
rna2 = rna@assays$RNA@counts
gene1=Converse_GeneIDSymbol(rownames(rna2),Spec1 = 'Hs')
rna2 = rna2[gene1[,1],]
rownames(rna2) = gene1[,2]
rna2=CreateSeuratObject(rna2)
rna2=SCTransform(rna2)
### ldsc summary
ldsc_result = ldsc_result[!duplicated(ldsc_result[,1]),]
rownames(ldsc_result) = ldsc_result[,1]
ldsc_result = ldsc_result[,ct_use]
sig_ct_list = list()
sig_ct_vector = c()
for (i in 1:nrow(ldsc_result)) {
sig_ct = colnames(ldsc_result)[ldsc_result[i,]<0.05]
if (length(sig_ct)>0) {
sig_ct_list[[rownames(ldsc_result)[i]]] = sig_ct
sig_ct_merge = paste0(sig_ct,collapse = ';')
sig_ct_vector = c(sig_ct_vector,sig_ct_merge)
}
}
sig_ct_df = data.frame(names(sig_ct_list),sig_ct_vector)
colnames(sig_ct_df) = c('disease','related_cell_type')
write.table(sig_ct_df,paste0(output_path,'disease_related_celltypes.txt'),
quote = F,sep = '\t',row.names = F)
### disease related ccc
ccc_plot_list = list()
ccc_list = list()
rna2[['ct']] = rna$ct
for (i in 1:length(sig_ct_list)) {
disease_name_use = names(sig_ct_list)[i]
related_ct = sig_ct_list[[i]]
if (length(related_ct)>1) {
rna_use = subset(rna2,ct %in% related_ct)
ccc = run_cellchat(rna_use,rna_use@meta.data,group = 'ct',species = 'hs')
groupSize <- as.numeric(table(ccc@idents))
par(mfrow=c(1,1))
p1 = netVisual_circle(ccc@net$weight, vertex.weight = groupSize,
weight.scale = T, label.edge= F,
title.name = "",vertex.label.cex = 2)
print(disease_name_use)
### disease related ccc
ccc_plot_list[[i]] = p1
ccc_list[[i]] = ccc
}
}
source('F:\\general_code\\run_cellchat.R')
for (i in 1:length(sig_ct_list)) {
disease_name_use = names(sig_ct_list)[i]
related_ct = sig_ct_list[[i]]
if (length(related_ct)>1) {
rna_use = subset(rna2,ct %in% related_ct)
ccc = run_cellchat(rna_use,rna_use@meta.data,group = 'ct',species = 'hs')
groupSize <- as.numeric(table(ccc@idents))
par(mfrow=c(1,1))
p1 = netVisual_circle(ccc@net$weight, vertex.weight = groupSize,
weight.scale = T, label.edge= F,
title.name = "",vertex.label.cex = 1)
print(disease_name_use)
### disease related ccc
ccc_plot_list[[i]] = p1
ccc_list[[i]] = ccc
}
}
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
filenames2 = paste0(output_path,'ccc/',name_use,'.svg')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
filenames2 = paste0(output_path,'ccc/',name_use,'.svg')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
sig_ct_list
### ldsc summary
ldsc_result = ldsc_result[!duplicated(ldsc_result[,1]),]
rownames(ldsc_result) = ldsc_result[,1]
ldsc_result = ldsc_result[,ct_use]
sig_ct_list = list()
sig_ct_vector = c()
for (i in 1:nrow(ldsc_result)) {
sig_ct = colnames(ldsc_result)[ldsc_result[i,]<0.05]
if (length(sig_ct)>0) {
sig_ct_list[[rownames(ldsc_result)[i]]] = sig_ct
sig_ct_merge = paste0(sig_ct,collapse = ';')
sig_ct_vector = c(sig_ct_vector,sig_ct_merge)
}
}
sig_ct_df = data.frame(names(sig_ct_list),sig_ct_vector)
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
names(sig_ct_list)
ldsc_result
ldsc_result <- read.delim(ldsc_path)
ct_use = intersect(colnames(ldsc_result),ct_use)
snp_all = readRDS(snp_path)
ldsc_result$X = gsub(' ','_',ldsc_result$X)
###get all disease
disease_all = dir(disease_path)
disease_all_name = as.data.frame(t(as.data.frame(strsplit(disease_all,'\\.'))))
names(disease_all) = disease_all_name[,4]
### ldsc summary
ldsc_result = ldsc_result[!duplicated(ldsc_result[,1]),]
rownames(ldsc_result) = ldsc_result[,1]
ldsc_result = ldsc_result[,ct_use]
sig_ct_list = list()
sig_ct_vector = c()
for (i in 1:nrow(ldsc_result)) {
sig_ct = colnames(ldsc_result)[ldsc_result[i,]<0.05]
if (length(sig_ct)>0) {
sig_ct_list[[rownames(ldsc_result)[i]]] = sig_ct
sig_ct_merge = paste0(sig_ct,collapse = ';')
sig_ct_vector = c(sig_ct_vector,sig_ct_merge)
}
}
sig_ct_df = data.frame(names(sig_ct_list),sig_ct_vector)
colnames(sig_ct_df) = c('disease','related_cell_type')
(sig_ct_df
)
View(sig_ct_df)
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
names(sig_ct_list)
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
filenames2 = paste0(output_path,'ccc/',name_use,'.svg')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
library(Seurat)
library(igraph)
library(GenomicRanges)
setwd('E:\\DRCTdb\\5.Downstream_analysis')
source('identify_region_motif.R')
source('overlap_gwas.R')
source('plot.R')
### path need to define
output_path = 'E:\\DRCTdb\\ignore\\downstream_result\\sample12\\'
rna_path = 'E:\\DRCTdb\\ignore\\scRNA-seq\\sample12\\Sample12_RNA-seq.Rds'
atac_path = 'E:\\DRCTdb\\ignore\\bed\\sample12/'
ldsc_path = "E:/DRCTdb/ignore/LDSC_results/sample12/pvalues.tsv"
#### db path
snp_path = 'E:\\public\\all_snp_info_gr.Rds'
disease_path = 'E:\\DRCTdb\\ignore\\LDSC_hg38\\summary_statistics\\Josh'
### create output folder
dir.create(output_path)
dir.create(paste0(output_path,'grn_cor04'))
dir.create(paste0(output_path,'grn_cor02'))
dir.create(paste0(output_path,'rna_snp'))
dir.create(paste0(output_path,'atac_snp'))
dir.create(paste0(output_path,'ccc'))
###load data & define cell type use
rna = readRDS(rna_path)
rna@active.ident=as.factor(rna$ct)
atac = dir(atac_path)
atac_ct = unlist(strsplit(atac,'.bed.gz'))
ct_use = intersect(rna@active.ident,atac_ct)
rna[['ct']] = as.character(rna@active.ident)
names(atac) = atac_ct
atac = atac[names(atac) %in% ct_use]
atac_list = list()
for (i in 1:length(atac)) {
bed=read.delim(paste0(atac_path,atac[i]),header = F)
peak = paste0(bed[,1],':',bed[,2],'-',bed[,3])
atac_list[[names(atac)[i]]] = peak
}
ldsc_result <- read.delim(ldsc_path)
colnames(ldsc_result)=gsub('\\.','-',colnames(ldsc_result))
ct_use = intersect(colnames(ldsc_result),ct_use)
snp_all = readRDS(snp_path)
ldsc_result$X = gsub(' ','_',ldsc_result$X)
###get all disease
disease_all = dir(disease_path)
disease_all_name = as.data.frame(t(as.data.frame(strsplit(disease_all,'\\.'))))
names(disease_all) = disease_all_name[,4]
### ldsc summary
ldsc_result = ldsc_result[!duplicated(ldsc_result[,1]),]
rownames(ldsc_result) = ldsc_result[,1]
ldsc_result = ldsc_result[,ct_use]
sig_ct_list = list()
sig_ct_vector = c()
for (i in 1:nrow(ldsc_result)) {
sig_ct = colnames(ldsc_result)[ldsc_result[i,]<0.05]
if (length(sig_ct)>0) {
sig_ct_list[[rownames(ldsc_result)[i]]] = sig_ct
sig_ct_merge = paste0(sig_ct,collapse = ';')
sig_ct_vector = c(sig_ct_vector,sig_ct_merge)
}
}
sig_ct_df = data.frame(names(sig_ct_list),sig_ct_vector)
colnames(sig_ct_df) = c('disease','related_cell_type')
### disease related ccc
ccc_plot_list = list()
ccc_list = list()
source('F:\\general_code\\run_cellchat.R')
for (i in 1:length(sig_ct_list)) {
disease_name_use = names(sig_ct_list)[i]
related_ct = sig_ct_list[[i]]
if (length(related_ct)>1) {
rna_use = subset(rna,ct %in% related_ct)
ccc = run_cellchat(rna_use,rna_use@meta.data,group = 'ct',species = 'hs')
groupSize <- as.numeric(table(ccc@idents))
par(mfrow=c(1,1))
p1 = netVisual_circle(ccc@net$weight, vertex.weight = groupSize,
weight.scale = T, label.edge= F,
title.name = "",vertex.label.cex = 0.5)
print(disease_name_use)
### disease related ccc
ccc_plot_list[[i]] = p1
ccc_list[[i]] = ccc
}
}
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
filenames2 = paste0(output_path,'ccc/',name_use,'.svg')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
plot_grn_irena = function(data){
library(igraph)
library(IReNA)
tf_use = unique(unlist(strsplit(Tranfac201803_Hs_MotifTFsF$TFs,';')))
data_use = data[,c(1,2,5,3)]
node_type = c(rep('TF',nrow(data_use)),
ifelse(data_use$Var2 %in% tf_use,'TF','gene'))
nodes = data.frame(c(data_use$Var1,data_use$Var2),node_type)
colnames(nodes) <- c("name", "type")
nodes <- nodes[!duplicated(nodes$name), ]
colnames(data_use) <- c("from", "to", "type", "weight")
g <- igraph::graph_from_data_frame(data_use, vertices = nodes, directed = TRUE)
edge.color = c('#FDD1B0','#B3B3B3')
### define edge color
edge.color2 <- c()
for (i in data_use$type) {
if (i == 'positive') {
edge.color2 <- c(edge.color2,edge.color[1])
} else if (i == 'negative') {
edge.color2 <- c(edge.color2,edge.color[2])
}
}
layout1 <- igraph::layout_on_grid(g)
igraph::E(g)$arrow.size <- 0.8
igraph::E(g)$arrow.width <- 0.5
igraph::E(g)$label.color <- 'black'
igraph::E(g)$color<- edge.color2
igraph::E(g)$width<- 2.5
igraph::V(g)$color <- ifelse(nodes$type=='TF','#67C7C1','#E56145')
#igraph::V(g)$size<- vertex.size1
igraph::V(g)$label.color <- 'black'
igraph::V(g)$frame.color <- 'white'
plot(g, layout = layout1, edge.curved = 0, vertex.label.cex =
0.8, layout = layout1,
vertex.shape='circle')
if (length(unique(nodes$type))>1) {
legend(x = 1.3, y = 1.3, levels(factor(igraph::V(g)$type)), pch = 21,
col = "#777777", pt.bg = c('#E56145','#67C7C1'))
}
}
plot_disease_heatmap <- function(pvalues){
pvalues <- pvalues[!duplicated(pvalues[,1]),]
rownames(pvalues) <- pvalues[,1]
pvalues <- pvalues[,-1]
p2 <- -log10(pvalues)
Color1 <- c(rgb(102/255,46/255,115/255),rgb(31/255,153/255,139/255),rgb(251/255,232/255,48/255))
pheatmap::pheatmap(as.matrix(p2), cluster_cols =T, cluster_rows =
T, color = colorRampPalette(Color1)(50),
border_color=rgb(200/255,200/255,200/255))
}
plot_heatmap_all <- function(ldsc_result_path='E:\\DRCTdb\\ignore\\LDSC_results/',
output_path = 'E:\\DRCTdb\\ignore\\downstream_result/'){
dir1 = dir(ldsc_result_path)
for (i in dir1) {
pvalue = read.delim(paste0(ldsc_result_path,i,'/pvalues.tsv'))
out_path = paste0(output_path,i,'/ldsc_heatmap.tiff')
tiff(filename = out_path, width = 12000, height = 9000, units = "px", res = 1200, compression = "lzw")
print(plot_disease_heatmap(pvalue))
dev.off()
}
}
plot_heatmap_all <- function(ldsc_result_path='E:\\DRCTdb\\ignore\\LDSC_results/',
output_path = 'E:\\DRCTdb\\ignore\\downstream_result/'){
dir1 = dir(ldsc_result_path)
for (i in dir1) {
pvalue = read.delim(paste0(ldsc_result_path,i,'/pvalues.tsv'))
out_path = paste0(output_path,i,'/ldsc_heatmap.tiff')
out_path2 = paste0(output_path,i,'/ldsc_heatmap.svg')
tiff(filename = out_path, width = 12000, height = 9000, units = "px", res = 1200, compression = "lzw")
print(plot_disease_heatmap(pvalue))
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(plot_disease_heatmap(pvalue))
dev.off()
}
}
plot_heatmap_all()
plot_heatmap_all <- function(ldsc_result_path='E:\\DRCTdb\\ignore\\LDSC_results/',
output_path = 'E:\\DRCTdb\\ignore\\downstream_result/'){
dir1 = dir(ldsc_result_path)
for (i in dir1) {
pvalue = read.delim(paste0(ldsc_result_path,i,'/pvalues.tsv'))
out_path = paste0(output_path,i,'/ldsc_heatmap.tiff')
out_path2 = paste0(output_path,i,'/ldsc_heatmap.svg')
tiff(filename = out_path, width = 12000, height = 9000, units = "px", res = 1200, compression = "lzw")
print(plot_disease_heatmap(pvalue))
dev.off()
svg(filename = out_path2, width = 4, height = 4)
print(plot_disease_heatmap(pvalue))
dev.off()
}
}
plot_heatmap_all()
svg()
plot_heatmap_all <- function(ldsc_result_path='E:\\DRCTdb\\ignore\\LDSC_results/',
output_path = 'E:\\DRCTdb\\ignore\\downstream_result/'){
dir1 = dir(ldsc_result_path)
for (i in dir1) {
pvalue = read.delim(paste0(ldsc_result_path,i,'/pvalues.tsv'))
out_path = paste0(output_path,i,'/ldsc_heatmap.tiff')
out_path2 = paste0(output_path,i,'/ldsc_heatmap.svg')
svg(filename = out_path2, width = 4, height = 4)
print(plot_disease_heatmap(pvalue))
dev.off()
}
}
plot_heatmap_all()
