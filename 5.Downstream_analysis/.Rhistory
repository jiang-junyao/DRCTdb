install.packages("tidyverse")
install.packages('Seurat')
library(Seurat)
install.packages("parallelly")
install.packages("Seurat")
library(Seurat)
install.packages("parallelly")
install.packages("parallelly")
library(Seurat)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Mfuzz")
library(Mfuzz)
remove.packages("SummarizedExperiment")
install.packages("C:/Users/armstrong/Desktop/SummarizedExperiment.zip", repos = NULL, type = "win.binary")
install.packages("rtracklayer")
BiocManager::install('rtracklayer')
library(rtracklayer)
rtracklayer::import(format = 'gtf')
?import
??import
'TNGGGTTGGCCTCAGAAAGGTGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTAATCGATCTCGTTTGGCGTGT' |> nchar()
'taatacgactcactatagggccttctcccggagtccta'
'taatacgactcactatagggccttctcccggagtccta' |> nchar()
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
df <- AvailableData()
library(SeuratData)
df <- AvailableData()
View(df)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
remove.packages("cli")
install.packages("cli")
devtools::install_github("bnprks/BPCells")
library(BPCells)
library(Seurat)
library(SeuratObject)
library(SeuratDisk)
library(Azimuth)
?save
?saveRDS
?saveRDS.Seurat
saveRDS.Seurat
saveRDS.Seurat()
SeuratObject::saveRDS()
SeuratObject::saveRDS
options(Seurat.object.assay.version = "v5")
remotes::install_github('satijalab/azimuth', ref = 'master')
BiocManager::install("batchelor")
BiocManager::install("batchelor",force = T)
BiocManager::install("batchelor",force = T)
.libPaths()
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
remotes::install_github('satijalab/seurat-wrappers')
library(SeuratWrappers)
SeuratWrappers::RunFastMNN()
shiny::runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
?dashboardHeader
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
runApp('C:/Users/armstrong/Desktop/flask')
remotes::install_github("PMBio/MuDataSeurat")
knitr::opts_chunk$set(echo = F,dev="CairoPNG", out.width = "100%")
rbbt::bbt_write_bib("references.bib",
rbbt::bbt_detect_citations(list.files(pattern = 'Rmd')),
overwrite = TRUE)
library(knitr)
library(Seurat)
library(tidyverse)
library(glue)
source('function.R')
sample <- 'sample1'
knitr::include_graphics(glue("./{sample}/Fig/PNG/{sample}_feature_plot.png"))
knitr::include_graphics(glue("./{sample}Fig/PNG/{sample}_feature_plot_othermaker.png"))
library(chromVAR)
library(motifmatchr)
library(Matrix)
library(SummarizedExperiment)
library(BiocParallel)
set.seed(2017)
options(timeout = max(1000, getOption("timeout")))
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
data(example_counts, package = "chromVAR")
library(BSgenome.Hsapiens.UCSC.hg19)
example_counts <- addGCBias(example_counts, genome = BSgenome.Hsapiens.UCSC.hg19)
View(example_counts)
example_counts$depth
example_counts$Cell_Type
counts_filtered <- filterSamples(example_counts, min_depth = 1500,
min_in_peaks = 0.15)
counts_filtered <- filterPeaks(counts_filtered)
motifs <- getJasparMotifs()
BiocManager::install('JASPAR2016')
motifs <- getJasparMotifs()
View(motifs)
dev <- computeDeviations(object = counts_filtered,
annotations = motif_ix)
motif_ix <- matchMotifs(motifs, counts_filtered,
genome = BSgenome.Hsapiens.UCSC.hg19)
dev <- computeDeviations(object = counts_filtered, annotations = motif_ix)
View(dev)
dev@colData
dev@assays
dev@elementMetadata
variability <- computeVariability(dev)
View(variability)
get_name <- function(x){
R1 = paste0(x,'_S1_L001_R1_001.fastq.gz')
R2 = paste0(x,'_S1_L001_R2_001.fastq.gz')
R3 = paste0(x,'_S1_L001_R3_001.fastq.gz')
df <- tibble::tibble(R1,R2,R3)
print(df)
return(df)
}
get_name('SAMP-689')
get_name <- function(x){
R1 = paste0(x,'_S1_L001_R1_001.fastq.gz')
R2 = paste0(x,'_S1_L001_R2_001.fastq.gz')
R3 = paste0(x,'_S1_L001_R3_001.fastq.gz')
df <- tibble::tibble(R1,R2,R3)
return(df)
}
get_name('SAMP-689')
get_name <- function(x){
R1 = paste0(x,'_S1_L001_R1_001.fastq.gz')
R2 = paste0(x,'_S1_L001_R2_001.fastq.gz')
R3 = paste0(x,'_S1_L001_R3_001.fastq.gz')
df <- tibble::tibble(name = c(R1,R2,R3))
return(df)
}
get_name('SAMP-689')
get_name <- function(x){
R1 = paste0(x,'_S1_L001_R1_001.fastq.gz')
R2 = paste0(x,'_S1_L001_R2_001.fastq.gz')
R3 = paste0(x,'_S1_L001_R3_001.fastq.gz')
df <- tibble::tibble(name = c(R1,R2,R3))
print(df)
return(df)
}
get_name('SAMP-689')
get_name <- function(x){
R1 = paste0(x,'_S1_L001_R1_001.fastq.gz')
R2 = paste0(x,'_S1_L001_R2_001.fastq.gz')
R3 = paste0(x,'_S1_L001_R3_001.fastq.gz')
df <- tibble::tibble(name = c(R1,R2,R3))
return(df)
}
get_name('SAMP-689')
get_name('SAMP-1097')
get_name('SAMP-1136')
get_name('SAMP-692')
nchar('GAGTAACAGAACTGGCTGCTGGTTCTTTACAATTGCCCAGCTGCTCNGCA')
?fread
'GAAGAGCAGGCATGCA'
'GAAGAGCAGGCATGCA' |> nchar()
4^16
get_name('SAMP-1144')
get_name('SAMP-1149')
get_name('SAMP-1151')
get_name('SAMP-1607')
get_name('SAMP-1148')
get_name('SAMP-1611')
get_name('SAMP-1137')
get_name('SAMP-1610')
get_name('SAMP-1602')
get_name('SAMP-1697')
get_name('SAMP-689')
get_name('SAMP-1097')
get_name('SAMP-1136')
get_name('SAMP-692')
knitr::opts_chunk$set(echo = F,dev="CairoPNG", out.width = "100%")
rbbt::bbt_write_bib("references.bib",
rbbt::bbt_detect_citations(list.files(pattern = 'Rmd')),
overwrite = TRUE)
library(knitr)
library(glue)
knitr::include_graphics("../../Islet_public_dataset/Fig/PNG/Alpha_DEGs_across_multi-sample2.png")
knitr::include_graphics("../../Islet_public_dataset/Fig/PNG/Beta_DEGs_across_multi-sample2.png")
?include_graphics
knitr::include_graphics("../../Islet_public_dataset/Fig/PNG/Alpha_DEGs_across_multi-sample2.png")
knitr::include_graphics("../../Islet_public_dataset/Fig/PNG/Beta_DEGs_across_multi-sample2.png")
install.packages("igraph")
setwd("E:/DRCTDb/DRCTdb/5.Downstream_analysis")
library(ChIPseeker)
library(tidyverse)
library(GenomicRanges)
peak_anno <- function(reference_GRange, tssRegion = c(-2000, 500),filter = FALSE) {
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
library(org.Hs.eg.db)
annodb <- 'org.Hs.eg.db'
peakAnno <- ChIPseeker::annotatePeak(reference_GRange,
tssRegion = tssRegion,
TxDb = txdb, annoDb = annodb,
verbose = F
)
region <- peakAnno@anno@elementMetadata$annotation
gene <- peakAnno@anno@elementMetadata$ENSEMBL
symbol <- peakAnno@anno@elementMetadata$SYMBOL
start1 <- peakAnno@anno@ranges@start
dis <- peakAnno@anno@elementMetadata$distanceToTSS
exon1 <- grep('exon',region)
Intron1 <- grep('Intron',region)
Intergenic1 <- grep('Intergenic',region)
Downstream1 <- grep('Downstream',region)
Promoter1 <- grep('Promoter',region)
UTR3 <- grep("3' UTR",region)
UTR5 <- grep("5' UTR",region)
region2 <- rep(NA,length(region))
region2[exon1]='Exon'
region2[Intron1]='Intron'
region2[Downstream1]='Downstream'
region2[Promoter1]='Promoter'
region2[UTR3]="3' UTR"
region2[UTR5]="5' UTR"
region2[Intergenic1]='Intergenic'
table(region2)
peak_region1 <- paste(as.character(peakAnno@anno@seqnames),
as.character(peakAnno@anno@ranges),sep = ':')
peak_gr=reference_GRange
peak_gr$gene = gene
peak_gr$symbol = symbol
peak_gr$region = region2
peak_gr$distanceToTSS = dis
### filter peaks based on annotation
if (filter) {
peak_gr = peak_gr[peak_gr$region=='Promoter']
}
return(peak_gr)
}
snp_file <- list.files('../../data/downstream_result/',pattern = '.txt',full.names = T,recursive = T) %>% str_subset('snp')
test <-
data.table::fread(snp_file[1],header = F)
View(test)
test <-
data.table::fread(snp_file[1])
test <-
data.table::fread(snp_file[1]) |>
dplyr::select(c(1:3,11,7))
colnames(test)[7] <- 'SNP_location'
View(test)
test <- test |> dplyr::select(c(1:3, 11, 7)) |> makeGRangesFromDataFrame(keep.extra.columns = T) |>
peak_anno() |>
as.data.frame()
df <- df |> dplyr::select(c(1:3, 11, 7)) |> makeGRangesFromDataFrame(keep.extra.columns = T) |>
peak_anno()
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% makeGRangesFromDataFrame(keep.extra.columns = T) |>
peak_anno() %>%
as.data.frame()
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% makeGRangesFromDataFrame(keep.extra.columns = T) |>
peak_anno()
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% makeGRangesFromDataFrame(keep.extra.columns = T)
test
peak_anno(test)
colnames(test)
test <-
data.table::fread(snp_file[1])
colnames(test)
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% mutute(seqnames = paste0('chr',seqnames)) |>
makeGRangesFromDataFrame(keep.extra.columns = T)  |>
peak_anno(test) |>
as.data.frame()
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) |>
makeGRangesFromDataFrame(keep.extra.columns = T)  |>
peak_anno(test) |>
as.data.frame()
colnames(test)[7] <- 'SNP_location'
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) |>
makeGRangesFromDataFrame(keep.extra.columns = T)  |>
peak_anno(test) |>
as.data.frame()
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) |>
makeGRangesFromDataFrame(keep.extra.columns = T)
test <-
data.table::fread(file)
test <-
data.table::fread(snp_file[1])
colnames(test)[7] <- 'SNP_location'
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) |>
makeGRangesFromDataFrame(keep.extra.columns = T) |>
peak_anno(test)
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) |>
makeGRangesFromDataFrame(keep.extra.columns = T)
test
test@seqnames |> unique()
peak_anno(test)
test <-
data.table::fread(snp_file[1])
colnames(test)[7] <- 'SNP_location'
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) %>%
makeGRangesFromDataFrame(keep.extra.columns = T) %>%
peak_anno(test) %>%
as.data.frame()
test <-
data.table::fread(snp_file[1])
colnames(test)[7] <- 'SNP_location'
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) %>%
makeGRangesFromDataFrame(keep.extra.columns = T) %>%
peak_anno(test)
test <-
data.table::fread(snp_file[1])
colnames(test)[7] <- 'SNP_location'
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) %>%
makeGRangesFromDataFrame(keep.extra.columns = T)
test <-  peak_anno(test)
test <-
data.table::fread(snp_file[1])
colnames(test)[7] <- 'SNP_location'
test <- test %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) %>%
makeGRangesFromDataFrame(keep.extra.columns = T)
test <-  peak_anno(test) %>% as.data.frame()
snp_file
map(snp_file,function(file){
df <-
data.table::fread(file)
colnames(df)[7] <- 'SNP_location'
gr <- df %>% dplyr::select(c(1:3, 11, 7)) %>% dplyr::mutate(seqnames = paste0('chr',seqnames)) %>%
makeGRangesFromDataFrame(keep.extra.columns = T)
df1 <-  peak_anno(gr) %>% as.data.frame()
data.table::fwrite(df1,file = file,sep = '\t')
},.progress = T)
