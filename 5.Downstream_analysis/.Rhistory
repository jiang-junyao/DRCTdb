names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
filenames2 = paste0(output_path,'ccc/',name_use,'.svg')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
filenames2 = paste0(output_path,'ccc/',name_use,'.svg')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
sig_ct_list
### ldsc summary
ldsc_result = ldsc_result[!duplicated(ldsc_result[,1]),]
rownames(ldsc_result) = ldsc_result[,1]
ldsc_result = ldsc_result[,ct_use]
sig_ct_list = list()
sig_ct_vector = c()
for (i in 1:nrow(ldsc_result)) {
sig_ct = colnames(ldsc_result)[ldsc_result[i,]<0.05]
if (length(sig_ct)>0) {
sig_ct_list[[rownames(ldsc_result)[i]]] = sig_ct
sig_ct_merge = paste0(sig_ct,collapse = ';')
sig_ct_vector = c(sig_ct_vector,sig_ct_merge)
}
}
sig_ct_df = data.frame(names(sig_ct_list),sig_ct_vector)
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
names(sig_ct_list)
ldsc_result
ldsc_result <- read.delim(ldsc_path)
ct_use = intersect(colnames(ldsc_result),ct_use)
snp_all = readRDS(snp_path)
ldsc_result$X = gsub(' ','_',ldsc_result$X)
###get all disease
disease_all = dir(disease_path)
disease_all_name = as.data.frame(t(as.data.frame(strsplit(disease_all,'\\.'))))
names(disease_all) = disease_all_name[,4]
### ldsc summary
ldsc_result = ldsc_result[!duplicated(ldsc_result[,1]),]
rownames(ldsc_result) = ldsc_result[,1]
ldsc_result = ldsc_result[,ct_use]
sig_ct_list = list()
sig_ct_vector = c()
for (i in 1:nrow(ldsc_result)) {
sig_ct = colnames(ldsc_result)[ldsc_result[i,]<0.05]
if (length(sig_ct)>0) {
sig_ct_list[[rownames(ldsc_result)[i]]] = sig_ct
sig_ct_merge = paste0(sig_ct,collapse = ';')
sig_ct_vector = c(sig_ct_vector,sig_ct_merge)
}
}
sig_ct_df = data.frame(names(sig_ct_list),sig_ct_vector)
colnames(sig_ct_df) = c('disease','related_cell_type')
(sig_ct_df
)
View(sig_ct_df)
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
names(sig_ct_list)
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
filenames2 = paste0(output_path,'ccc/',name_use,'.svg')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
library(Seurat)
library(igraph)
library(GenomicRanges)
setwd('E:\\DRCTdb\\5.Downstream_analysis')
source('identify_region_motif.R')
source('overlap_gwas.R')
source('plot.R')
### path need to define
output_path = 'E:\\DRCTdb\\ignore\\downstream_result\\sample12\\'
rna_path = 'E:\\DRCTdb\\ignore\\scRNA-seq\\sample12\\Sample12_RNA-seq.Rds'
atac_path = 'E:\\DRCTdb\\ignore\\bed\\sample12/'
ldsc_path = "E:/DRCTdb/ignore/LDSC_results/sample12/pvalues.tsv"
#### db path
snp_path = 'E:\\public\\all_snp_info_gr.Rds'
disease_path = 'E:\\DRCTdb\\ignore\\LDSC_hg38\\summary_statistics\\Josh'
### create output folder
dir.create(output_path)
dir.create(paste0(output_path,'grn_cor04'))
dir.create(paste0(output_path,'grn_cor02'))
dir.create(paste0(output_path,'rna_snp'))
dir.create(paste0(output_path,'atac_snp'))
dir.create(paste0(output_path,'ccc'))
###load data & define cell type use
rna = readRDS(rna_path)
rna@active.ident=as.factor(rna$ct)
atac = dir(atac_path)
atac_ct = unlist(strsplit(atac,'.bed.gz'))
ct_use = intersect(rna@active.ident,atac_ct)
rna[['ct']] = as.character(rna@active.ident)
names(atac) = atac_ct
atac = atac[names(atac) %in% ct_use]
atac_list = list()
for (i in 1:length(atac)) {
bed=read.delim(paste0(atac_path,atac[i]),header = F)
peak = paste0(bed[,1],':',bed[,2],'-',bed[,3])
atac_list[[names(atac)[i]]] = peak
}
ldsc_result <- read.delim(ldsc_path)
colnames(ldsc_result)=gsub('\\.','-',colnames(ldsc_result))
ct_use = intersect(colnames(ldsc_result),ct_use)
snp_all = readRDS(snp_path)
ldsc_result$X = gsub(' ','_',ldsc_result$X)
###get all disease
disease_all = dir(disease_path)
disease_all_name = as.data.frame(t(as.data.frame(strsplit(disease_all,'\\.'))))
names(disease_all) = disease_all_name[,4]
### ldsc summary
ldsc_result = ldsc_result[!duplicated(ldsc_result[,1]),]
rownames(ldsc_result) = ldsc_result[,1]
ldsc_result = ldsc_result[,ct_use]
sig_ct_list = list()
sig_ct_vector = c()
for (i in 1:nrow(ldsc_result)) {
sig_ct = colnames(ldsc_result)[ldsc_result[i,]<0.05]
if (length(sig_ct)>0) {
sig_ct_list[[rownames(ldsc_result)[i]]] = sig_ct
sig_ct_merge = paste0(sig_ct,collapse = ';')
sig_ct_vector = c(sig_ct_vector,sig_ct_merge)
}
}
sig_ct_df = data.frame(names(sig_ct_list),sig_ct_vector)
colnames(sig_ct_df) = c('disease','related_cell_type')
### disease related ccc
ccc_plot_list = list()
ccc_list = list()
source('F:\\general_code\\run_cellchat.R')
for (i in 1:length(sig_ct_list)) {
disease_name_use = names(sig_ct_list)[i]
related_ct = sig_ct_list[[i]]
if (length(related_ct)>1) {
rna_use = subset(rna,ct %in% related_ct)
ccc = run_cellchat(rna_use,rna_use@meta.data,group = 'ct',species = 'hs')
groupSize <- as.numeric(table(ccc@idents))
par(mfrow=c(1,1))
p1 = netVisual_circle(ccc@net$weight, vertex.weight = groupSize,
weight.scale = T, label.edge= F,
title.name = "",vertex.label.cex = 0.5)
print(disease_name_use)
### disease related ccc
ccc_plot_list[[i]] = p1
ccc_list[[i]] = ccc
}
}
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
### output ccc
names(ccc_plot_list) = names(sig_ct_list)
names(ccc_list) = names(sig_ct_list)
for (i in 1:length(ccc_plot_list)) {
name_use = names(ccc_plot_list)[i]
filenames = paste0(output_path,'ccc/',name_use,'.tiff')
filenames2 = paste0(output_path,'ccc/',name_use,'.svg')
if (!is.null(ccc_plot_list[[i]])) {
tiff(filename = filenames, width = 10000, height = 6000, units = "px", res = 1200, compression = "lzw")
print(ccc_plot_list[[i]])
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(ccc_plot_list[[i]])
dev.off()
}
}
plot_grn_irena = function(data){
library(igraph)
library(IReNA)
tf_use = unique(unlist(strsplit(Tranfac201803_Hs_MotifTFsF$TFs,';')))
data_use = data[,c(1,2,5,3)]
node_type = c(rep('TF',nrow(data_use)),
ifelse(data_use$Var2 %in% tf_use,'TF','gene'))
nodes = data.frame(c(data_use$Var1,data_use$Var2),node_type)
colnames(nodes) <- c("name", "type")
nodes <- nodes[!duplicated(nodes$name), ]
colnames(data_use) <- c("from", "to", "type", "weight")
g <- igraph::graph_from_data_frame(data_use, vertices = nodes, directed = TRUE)
edge.color = c('#FDD1B0','#B3B3B3')
### define edge color
edge.color2 <- c()
for (i in data_use$type) {
if (i == 'positive') {
edge.color2 <- c(edge.color2,edge.color[1])
} else if (i == 'negative') {
edge.color2 <- c(edge.color2,edge.color[2])
}
}
layout1 <- igraph::layout_on_grid(g)
igraph::E(g)$arrow.size <- 0.8
igraph::E(g)$arrow.width <- 0.5
igraph::E(g)$label.color <- 'black'
igraph::E(g)$color<- edge.color2
igraph::E(g)$width<- 2.5
igraph::V(g)$color <- ifelse(nodes$type=='TF','#67C7C1','#E56145')
#igraph::V(g)$size<- vertex.size1
igraph::V(g)$label.color <- 'black'
igraph::V(g)$frame.color <- 'white'
plot(g, layout = layout1, edge.curved = 0, vertex.label.cex =
0.8, layout = layout1,
vertex.shape='circle')
if (length(unique(nodes$type))>1) {
legend(x = 1.3, y = 1.3, levels(factor(igraph::V(g)$type)), pch = 21,
col = "#777777", pt.bg = c('#E56145','#67C7C1'))
}
}
plot_disease_heatmap <- function(pvalues){
pvalues <- pvalues[!duplicated(pvalues[,1]),]
rownames(pvalues) <- pvalues[,1]
pvalues <- pvalues[,-1]
p2 <- -log10(pvalues)
Color1 <- c(rgb(102/255,46/255,115/255),rgb(31/255,153/255,139/255),rgb(251/255,232/255,48/255))
pheatmap::pheatmap(as.matrix(p2), cluster_cols =T, cluster_rows =
T, color = colorRampPalette(Color1)(50),
border_color=rgb(200/255,200/255,200/255))
}
plot_heatmap_all <- function(ldsc_result_path='E:\\DRCTdb\\ignore\\LDSC_results/',
output_path = 'E:\\DRCTdb\\ignore\\downstream_result/'){
dir1 = dir(ldsc_result_path)
for (i in dir1) {
pvalue = read.delim(paste0(ldsc_result_path,i,'/pvalues.tsv'))
out_path = paste0(output_path,i,'/ldsc_heatmap.tiff')
tiff(filename = out_path, width = 12000, height = 9000, units = "px", res = 1200, compression = "lzw")
print(plot_disease_heatmap(pvalue))
dev.off()
}
}
plot_heatmap_all <- function(ldsc_result_path='E:\\DRCTdb\\ignore\\LDSC_results/',
output_path = 'E:\\DRCTdb\\ignore\\downstream_result/'){
dir1 = dir(ldsc_result_path)
for (i in dir1) {
pvalue = read.delim(paste0(ldsc_result_path,i,'/pvalues.tsv'))
out_path = paste0(output_path,i,'/ldsc_heatmap.tiff')
out_path2 = paste0(output_path,i,'/ldsc_heatmap.svg')
tiff(filename = out_path, width = 12000, height = 9000, units = "px", res = 1200, compression = "lzw")
print(plot_disease_heatmap(pvalue))
dev.off()
svg(filename = filenames2, width = 4, height = 4)
print(plot_disease_heatmap(pvalue))
dev.off()
}
}
plot_heatmap_all()
plot_heatmap_all <- function(ldsc_result_path='E:\\DRCTdb\\ignore\\LDSC_results/',
output_path = 'E:\\DRCTdb\\ignore\\downstream_result/'){
dir1 = dir(ldsc_result_path)
for (i in dir1) {
pvalue = read.delim(paste0(ldsc_result_path,i,'/pvalues.tsv'))
out_path = paste0(output_path,i,'/ldsc_heatmap.tiff')
out_path2 = paste0(output_path,i,'/ldsc_heatmap.svg')
tiff(filename = out_path, width = 12000, height = 9000, units = "px", res = 1200, compression = "lzw")
print(plot_disease_heatmap(pvalue))
dev.off()
svg(filename = out_path2, width = 4, height = 4)
print(plot_disease_heatmap(pvalue))
dev.off()
}
}
plot_heatmap_all()
svg()
plot_heatmap_all <- function(ldsc_result_path='E:\\DRCTdb\\ignore\\LDSC_results/',
output_path = 'E:\\DRCTdb\\ignore\\downstream_result/'){
dir1 = dir(ldsc_result_path)
for (i in dir1) {
pvalue = read.delim(paste0(ldsc_result_path,i,'/pvalues.tsv'))
out_path = paste0(output_path,i,'/ldsc_heatmap.tiff')
out_path2 = paste0(output_path,i,'/ldsc_heatmap.svg')
svg(filename = out_path2, width = 4, height = 4)
print(plot_disease_heatmap(pvalue))
dev.off()
}
}
plot_heatmap_all()
ct_grn_atac <- function(peaks,gene.use,obj,cor_thr = 0.4,retina_promoter = F,
conver_gene = F){
########################
###identify tf-target from scatac
########################
library(IReNA)
library(tidyverse)
### peak annotation
peaks[,1] = paste0('chr',peaks[,1])
peaks = GenomicRanges::GRanges(paste0(peaks[,1],':',
peaks[,2],'-',
peaks[,3]))
peak_gr = peak_anno(peaks)
### find peak related motif
PWM = readRDS('F:\\public\\Transfac_PWMatrixList.rds')
motif1 = Tranfac201803_Hs_MotifTFsF
peak_motif_gr = identify_region_tfs(peak_gr,gene.use,PWM,motif1)
### overlap motif and peak
atac_out = overlap_peak_motif(peak_gr,peak_motif_gr,motif1)
tf_target = make_tf_target(atac_out)
########################
### integration scRNA & scATAC
########################
library(GENIE3)
all_tf = unique(unlist(strsplit(motif1$TFs,';')))
gene.use = rownames(extract_expressed_features(obj))
rna_filter = subset(obj,features=gene.use)
mt = rna_filter@assays$RNA@data
if (conver_gene) {
id = Converse_GeneIDSymbol(rownames(mt),Spec1 = 'Hs')
mt = mt[id[,1],]
rownames(mt) = id[,2]
}
grn = sparse.cor(t(as.matrix(mt)))
grn = reshape2::melt(grn)
grn = grn[grn[,1]%in%all_tf,]
grn = grn[grn[,3]> cor_thr | grn[,3] < (-cor_thr),]
grn$idx = paste0(grn[,1],'-',grn[,2])
grn = grn[grn$idx %in% tf_target,]
return(grn)
}
extract_expressed_features <- function(obj,cells_quantile = 0.05){
matrix_use = GetAssayData(obj)
if (cells_quantile==0) {
TfExp <- matrix_use[rowSums(as.matrix(matrix_use))>0,]
}else{
quantile_exp <- ncol(as.matrix(matrix_use))/(1/cells_quantile)
TfExp <- matrix_use[ncol(as.matrix(matrix_use))-rowSums(as.matrix(matrix_use==0))>quantile_exp,]}
return(TfExp)
}
peak_anno <- function(reference_GRange, tssRegion = c(-3000, 3000)) {
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
library(org.Hs.eg.db)
annodb <- 'org.Hs.eg.db'
peakAnno <- ChIPseeker::annotatePeak(reference_GRange,
tssRegion = tssRegion,
TxDb = txdb, annoDb = annodb
)
region <- peakAnno@anno@elementMetadata$annotation
gene <- peakAnno@anno@elementMetadata$ENSEMBL
symbol <- peakAnno@anno@elementMetadata$SYMBOL
start1 <- peakAnno@anno@ranges@start
dis <- peakAnno@anno@elementMetadata$distanceToTSS
exon1 <- grep('exon',region)
Intron1 <- grep('Intron',region)
Intergenic1 <- grep('Intergenic',region)
Downstream1 <- grep('Downstream',region)
Promoter1 <- grep('Promoter',region)
UTR3 <- grep("3' UTR",region)
UTR5 <- grep("5' UTR",region)
region2 <- rep(NA,length(region))
region2[exon1]='Exon'
region2[Intron1]='Intron'
region2[Downstream1]='Downstream'
region2[Promoter1]='Promoter'
region2[UTR3]="3' UTR"
region2[UTR5]="5' UTR"
region2[Intergenic1]='Intergenic'
table(region2)
peak_region1 <- paste(as.character(peakAnno@anno@seqnames),
as.character(peakAnno@anno@ranges),sep = ':')
peak_gr=reference_GRange
peak_gr$gene = gene
peak_gr$symbol = symbol
peak_gr$region = region2
peak_gr$distanceToTSS = dis
### filter peaks based on annotation
peak_gr = peak_gr[peak_gr$region=='Promoter']
return(peak_gr)
}
Str_to_GR <- function(x){
sp = strsplit(x,split='-')
chr = sapply(sp,function(x) x[[1]])
s = as.numeric(sapply(sp,function(x) x[[2]]))
e = as.numeric(sapply(sp,function(x) x[[3]]))
GR_out = GRanges(chr,IRanges(s,e))
return(GR_out)
}
Seqnames <- function(x){
out= as.character(seqnames(x))
return(out)
}
Start <- function(x){
out= as.numeric(start(x))
return(out)
}
End <- function(x){
out= as.numeric(end(x))
return(out)
}
Must_to_GR <- function(x){
library('pbapply')
chr_all = pblapply(x,Seqnames)
start_all = pblapply(x,Start)
end_all = pblapply(x,End)
len_all = pblapply(x,function(x) length(x))
#####
chr_all = as.character(unlist(chr_all))
start_all = as.numeric(unlist(start_all))
end_all = as.numeric(unlist(end_all))
##### #####
names_all = rep(names(x),len_all)
GR_out = GRanges(chr_all,IRanges(start_all,end_all),motifs=names_all)
return(GR_out)
}
motifs_select <- function(motif,gene){
index <- c()
if (stringr::str_sub(gene[1],1,3)=='ENS') {
col_idx = 5
}else{col_idx = 4}
for (i in 1:nrow(motif)) {
judge <- c()
gene1 <- strsplit(motif[i,col_idx],';')[[1]]
for (j in gene1) {
if (j %in% gene) {
judge <- c(judge,'YSE')
}
}
if ('YSE' %in% judge) {
index <- c(index,i)
}
}
motif1 <- motif[index,]
return(motif1)
}
identify_region_tfs <- function(All_peaks_GR,gene.use,PWM,motifdb,pvalue.cutoff = 5e-05){
library(motifmatchr)
library(BSgenome.Hsapiens.UCSC.hg38)
motif_use = motifs_select(motifdb,gene.use)
PWM = PWM[motif_use$Accession]
matched_motif <- matchMotifs(PWM,
All_peaks_GR,genome = BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38,
out='positions',p.cutoff = pvalue.cutoff)
matched_motif <- Must_to_GR(matched_motif)
return(matched_motif)
}
overlap_peak_motif <- function(peak,motif,motifdb){
overlaped = findOverlaps(peak,motif)
peak_motif = cbind(as.data.frame(peak[overlaped@from]),as.data.frame(motif[overlaped@to]))
peak_motif$TF = motifdb[match(peak_motif$motifs,motifdb$Accession),4]
return(peak_motif)
}
make_tf_target <- function(atac_out){
tf = atac_out$TF
tf = paste0(tf,'#',atac_out$symbol)
tf_target = unlist(map(tf,~paste_gene(.x)))
return(tf_target)
}
paste_gene <- function(gene){
tf = strsplit(gene,'#')[[1]][1]
target = strsplit(gene,'#')[[1]][2]
tf = unlist(strsplit(tf,';'))
return(paste0(tf,'-',target))
}
sparse.cor <- function(x){
n <- nrow(x)
cMeans <- colMeans(x)
cSums <- colSums(x)
# Calculate the population covariance matrix.
# There's no need to divide by (n-1) as the std. dev is also calculated the same way.
# The code is optimized to minize use of memory and expensive operations
covmat <- tcrossprod(cMeans, (-2*cSums+n*cMeans))
crossp <- as.matrix(crossprod(x))
covmat <- covmat+crossp
sdvec <- sqrt(diag(covmat)) # standard deviations of columns
covmat/crossprod(t(sdvec)) # correlation matrix
}
library(IReNA)
devtools::install_github("jiang-junyao/IReNA")
devtools::install_github("jiang-junyao/IReNA")
devtools::install_github("jiang-junyao/IReNA")
BiocManager::install('RcisTarget')
BiocManager::install('RcisTarget')
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
BiocManager::install('RcisTarget')
BiocManager::install('RcisTarget')
